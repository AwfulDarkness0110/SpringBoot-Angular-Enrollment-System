############## in-memory h2 database ##############
spring.datasource.url                       = ${env.DEV_DATASOURCE_URL}
spring.datasource.driverClassName           = org.h2.Driver
spring.datasource.username                  = ${env.DEV_DATASOURCE_USERNAME}
spring.datasource.password                  = ${env.DEV_DATASOURCE_PASSWORD}
spring.jpa.database-platform                = org.hibernate.dialect.H2Dialect
spring.h2.console.enabled                   = true
spring.h2.console.path                      = /h2-console
spring.h2.console.settings.trace            = false
spring.h2.console.settings.web-allow-others = false
# file-based storage h2 database
#spring.datasource.url=${env.DEV_DATASOURCE_URL_FILEBASED}


############# SSL configuration for local development ###############
system.ssl                                  = true
server.ssl.enabled                          = true
server.port                                 = 8443
server.ssl.key-store                        = ${env.SERVER_SSL_KEY_STORE}
server.ssl.key-store-type                   = ${env.SERVER_SSL_KEY_STORE_TYPE}
server.ssl.key-store-password               = ${env.SERVER_SSL_KEY_STORE_PASSWORD}


############ enable schema generation for printing sql scripts (both create and drop) ############
### this enable running actual database creation
#spring.jpa.properties.javax.persistence.schema-generation.database.action=drop-and-create

### needed for generating sql scripts which disable actual database creation, but we have option above enable it again
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=drop.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-source=metadata